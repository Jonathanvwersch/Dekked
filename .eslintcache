[{"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\StudyQueue.tsx":"1","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Buttons\\Button.tsx":"2","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\Portal.tsx":"3","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\FolderBinder\\Card.tsx":"4","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\FolderBinder\\FolderBinder.tsx":"5","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\FolderBinder\\AddCard.tsx":"6","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\DeleteModal.tsx":"7","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\Flashcard.tsx":"8","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\Toolbar.tsx":"9","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\Block.tsx":"10","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\FlashcardTab.tsx":"11","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\StudySet.tsx":"12","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\StudySetFlashcards.tsx":"13","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\StudySetNotes.tsx":"14","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\TextBlockData.tsx":"15","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\MainFrame.tsx":"16","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\LinkedFlashcard.tsx":"17","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\TopBar.tsx":"18","C:\\Users\\jonat\\dekked-nav-bar\\src\\index.tsx":"19","C:\\Users\\jonat\\dekked-nav-bar\\src\\App.tsx":"20","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\ChangePassword.tsx":"21","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\Account.tsx":"22","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\Settings.tsx":"23","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\SettingsData.tsx":"24","C:\\Users\\jonat\\dekked-nav-bar\\src\\custom-hooks\\useMousePosition.tsx":"25","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\ColourPicker.tsx":"26","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DeletedBlock.tsx":"27","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlock.tsx":"28","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\ProfileData.tsx":"29","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlockDots.tsx":"30","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlockMenuData.tsx":"31","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\SidebarTop.tsx":"32","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\SidebarBottom.tsx":"33","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\Sidebar.tsx":"34","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\LoadingSpinner.tsx":"35","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\SidebarWorkspace.tsx":"36","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\StudySetTabs.tsx":"37"},{"size":1578,"mtime":1609579422650,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1609584574547,"results":"40","hashOfConfig":"39"},{"size":2018,"mtime":1609786052583,"results":"41","hashOfConfig":"39"},{"size":1646,"mtime":1609758614420,"results":"42","hashOfConfig":"39"},{"size":5434,"mtime":1609937661102,"results":"43","hashOfConfig":"39"},{"size":358,"mtime":1609584505094,"results":"44","hashOfConfig":"39"},{"size":748,"mtime":1609584560738,"results":"45","hashOfConfig":"39"},{"size":1337,"mtime":1609757200773,"results":"46","hashOfConfig":"39"},{"size":2616,"mtime":1609773812862,"results":"47","hashOfConfig":"39"},{"size":1469,"mtime":1609849203017,"results":"48","hashOfConfig":"39"},{"size":706,"mtime":1609756419924,"results":"49","hashOfConfig":"39"},{"size":5504,"mtime":1609937704216,"results":"50","hashOfConfig":"39"},{"size":2182,"mtime":1609857557848,"results":"51","hashOfConfig":"39"},{"size":1577,"mtime":1609857620723,"results":"52","hashOfConfig":"39"},{"size":1771,"mtime":1609760067838,"results":"53","hashOfConfig":"39"},{"size":2777,"mtime":1609857145683,"results":"54","hashOfConfig":"39"},{"size":789,"mtime":1609756816645,"results":"55","hashOfConfig":"39"},{"size":8038,"mtime":1609847757708,"results":"56","hashOfConfig":"39"},{"size":304,"mtime":1609766304006,"results":"57","hashOfConfig":"39"},{"size":9699,"mtime":1609876139572,"results":"58","hashOfConfig":"39"},{"size":973,"mtime":1609770020482,"results":"59","hashOfConfig":"39"},{"size":1887,"mtime":1609933090073,"results":"60","hashOfConfig":"39"},{"size":982,"mtime":1609849223639,"results":"61","hashOfConfig":"39"},{"size":348,"mtime":1609771650212,"results":"62","hashOfConfig":"39"},{"size":461,"mtime":1609773033505,"results":"63","hashOfConfig":"39"},{"size":958,"mtime":1609775684962,"results":"64","hashOfConfig":"39"},{"size":2316,"mtime":1609775907810,"results":"65","hashOfConfig":"39"},{"size":6333,"mtime":1609945547157,"results":"66","hashOfConfig":"39"},{"size":597,"mtime":1609780387626,"results":"67","hashOfConfig":"39"},{"size":6473,"mtime":1609847902294,"results":"68","hashOfConfig":"39"},{"size":1621,"mtime":1609780377238,"results":"69","hashOfConfig":"39"},{"size":2477,"mtime":1609789061802,"results":"70","hashOfConfig":"39"},{"size":2312,"mtime":1609849251504,"results":"71","hashOfConfig":"39"},{"size":3919,"mtime":1609933582979,"results":"72","hashOfConfig":"39"},{"size":393,"mtime":1609931056276,"results":"73","hashOfConfig":"39"},{"size":5882,"mtime":1609933382257,"results":"74","hashOfConfig":"39"},{"size":3170,"mtime":1609937059798,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},"kqqhs6",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\StudyQueue.tsx",["163"],"import React, { useState } from \"react\";\r\nimport \"./StudyQueue.css\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport bookshelfIcon from \"@iconify/icons-mdi/bookshelf\";\r\nimport Portal from \"./Portal\";\r\nimport Button from \"../Buttons/Button\";\r\n\r\nconst  StudyQueue: React.FC = () => {\r\n  const [studyQueue, setStudyQueue] = useState<boolean>(false);\r\n  const [notifications, setNotifications] = useState<number>(0);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"studyQueue-container\">\r\n        <div className=\"studyQueueBubble-container\">\r\n          {notifications > 0 ? (\r\n            <div className=\"notificationBubble p2 bold\">{notifications}</div>\r\n          ) : null}\r\n          <div\r\n            className=\"studyQueueBubble primary\"\r\n            onClick={() => setStudyQueue((prevState) => !prevState)}\r\n          >\r\n            <Icon\r\n              className=\"icon StudyQueue\"\r\n              icon={bookshelfIcon}\r\n              style={{ color: \"white\", fontSize: \"24px\" }}\r\n            />\r\n          </div>\r\n          {studyQueue ? (\r\n            <Portal\r\n              state={studyQueue}\r\n              handleState={() => setStudyQueue((prevState) => !prevState)}\r\n            >\r\n              <div className=\"studyQueue dropdownMenu\">\r\n                <div className=\"items\"></div>\r\n                <div id=\"studyQueueButton\">\r\n                  <Button type=\"primary\" action=\"Study\" disabled={true}  />\r\n                </div>\r\n              </div>\r\n            </Portal>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StudyQueue;\r\n",["164","165"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Buttons\\Button.tsx",[],["166","167"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\Portal.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\FolderBinder\\Card.tsx",[],["168","169"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\FolderBinder\\FolderBinder.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\FolderBinder\\AddCard.tsx",[],["170","171"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\DeleteModal.tsx",[],["172","173"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\Flashcard.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\Toolbar.tsx",[],["174","175"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\Block.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\FlashcardTab.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\StudySet.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\StudySetFlashcards.tsx",["176"],"import React, { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport Flashcard from \"./Flashcard\";\r\n\r\ninterface Props {\r\n  folderBlocks:{\r\n    name: string;\r\n    type: string;\r\n    id: string;\r\n    iconColour: string;\r\n    isOpen: boolean;\r\n    binders: {\r\n        name: string;\r\n        type: string;\r\n        id: string;\r\n        folderId: string;\r\n        iconColour: string;\r\n        isOpen: boolean;\r\n        studySets: {\r\n            name: string;\r\n            type: string;\r\n            id: string;\r\n            binderId:string;\r\n            folderId:string;\r\n            iconColour:string;\r\n            tab:string;\r\n            flashcards: {\r\n              id:string;\r\n              type:string;\r\n              front:string;\r\n              back:string;\r\n              studySetId:string;\r\n              binderId:string;\r\n              folderId:string;\r\n            }[];\r\n        }[];\r\n    }[];\r\n  }[]\r\n  handleFolderBlocks: (newFolderBlocksArray:any) => void;\r\n  deleteFlashcard: (index:number) => void;\r\n}\r\n\r\nconst StudySetFlashcards: React.FC<Props> = ({\r\n  folderBlocks,\r\n  handleFolderBlocks,\r\n  deleteFlashcard,\r\n}) => {\r\n  let location = useLocation<any>();\r\n\r\n  const handleTab = () => {\r\n    const newFolderBlocksArray = folderBlocks.slice(); //make copy of array of folder blocks\r\n    newFolderBlocksArray[location.state.folderIndex].binders[\r\n      location.state.binderIndex\r\n    ].studySets[location.state.studySetIndex].tab = \"flashcards\"; // Invert folder block's open status\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleTab();\r\n  }, [location.state]);\r\n\r\n  return (\r\n    <>\r\n      {location.state\r\n        ? folderBlocks[location.state.folderIndex].binders[\r\n            location.state.binderIndex\r\n          ].studySets[location.state.studySetIndex].flashcards.map(\r\n            (item:any, index:number) => (\r\n              <Flashcard\r\n                deleteFlashcard={() => {\r\n                  deleteFlashcard(index);\r\n                }}\r\n                index={index}\r\n              />\r\n            )\r\n          )\r\n        : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default StudySetFlashcards;\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\StudySetNotes.tsx",["177"],"import React, { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\n\r\ninterface Props {\r\n  folderBlocks:{\r\n    name: string;\r\n    type: string;\r\n    id: string;\r\n    iconColour: string;\r\n    isOpen: boolean;\r\n    binders: {\r\n        name: string;\r\n        type: string;\r\n        id: string;\r\n        folderId: string;\r\n        iconColour: string;\r\n        isOpen: boolean;\r\n        studySets: {\r\n            name: string;\r\n            type: string;\r\n            id: string;\r\n            binderId:string;\r\n            folderId:string;\r\n            iconColour:string;\r\n            tab:string;\r\n            flashcards: {\r\n              id:string;\r\n              type:string;\r\n              front:string;\r\n              back:string;\r\n              studySetId:string;\r\n              binderId:string;\r\n              folderId:string;\r\n            }[];\r\n        }[];\r\n    }[];\r\n  }[]\r\n  handleFolderBlocks: (newFolderBlocksArray:any) => void;\r\n}\r\n\r\nconst StudySetNotes:React.FC<Props> = ({ folderBlocks, handleFolderBlocks }) => {\r\n  let location = useLocation<any>();\r\n\r\n  const handleTab = () => {\r\n    const newFolderBlocksArray = folderBlocks.slice(); //make copy of array of folder blocks\r\n    newFolderBlocksArray[location.state.folderIndex].binders[\r\n      location.state.binderIndex\r\n    ].studySets[location.state.studySetIndex].tab = \"notes\"; // Invert folder block's open status\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleTab();\r\n  }, [location.state]);\r\n\r\n  return <></>;\r\n}\r\n\r\nexport default StudySetNotes;\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\TextBlockData.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\MainFrame.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\LinkedFlashcard.tsx",[],["178","179"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\TopBar.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\index.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\App.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\ChangePassword.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\Account.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\Settings.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\SettingsData.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\custom-hooks\\useMousePosition.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\ColourPicker.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DeletedBlock.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlock.tsx",["180"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as Icons from \"react-icons/md\";\r\nimport \"./DropBlock.css\";\r\nimport { ReactComponent as FolderIcon } from \"../../custom-icons/folder.svg\";\r\nimport { ReactComponent as BinderIcon } from \"../../custom-icons/binder.svg\";\r\nimport { ReactComponent as StudySetIcon } from \"../../custom-icons/studyset.svg\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport DropBlockDots from \"./DropBlockDots\";\r\n\r\ninterface Props {\r\n  item: any;\r\n  folderIndex: number;\r\n  folderBlocks: {\r\n    name: string;\r\n    type: string;\r\n    id: string;\r\n    iconColour: string;\r\n    isOpen: boolean;\r\n    binders: {\r\n      name: string;\r\n      type: string;\r\n      id: string;\r\n      folderId: string;\r\n      iconColour: string;\r\n      isOpen: boolean;\r\n      studySets: {\r\n        name: string;\r\n        type: string;\r\n        id: string;\r\n        binderId: string;\r\n        folderId: string;\r\n        iconColour: string;\r\n        tab: string;\r\n        flashcards: {\r\n          type: string;\r\n          id: string;\r\n          front: string;\r\n          back: string;\r\n          studySetId: string;\r\n          binderId: string;\r\n          folderId: string;\r\n        }[];\r\n      }[];\r\n    }[];\r\n  }[];\r\n  handleFolderBlocks: (newFolderBlocksArray: any) => void;\r\n  handleNameChange: (\r\n    type: string,\r\n    folderIndex: number,\r\n    blockName: string,\r\n    binderIndex: any,\r\n    studySetIndex: any\r\n  ) => void;\r\n  handleDelete: () => void;\r\n  handleAddItem?: () => void;\r\n  binderIndex?: number;\r\n  studySetIndex?: number;\r\n}\r\n\r\nconst DropBlock: React.FC<Props> = ({\r\n  item,\r\n  folderIndex,\r\n  binderIndex,\r\n  studySetIndex,\r\n  folderBlocks,\r\n  handleFolderBlocks,\r\n  handleDelete,\r\n  handleAddItem,\r\n  handleNameChange,\r\n}) => {\r\n  const [editableName, setEditableName] = useState<boolean>(false);\r\n  const [iconColour, setIconColour] = useState(item.iconColour);\r\n  const nameRef = useRef<any>(null);\r\n\r\n  const handleRename = () => {\r\n    // Focus in on name of dropblock when being renamed (i.e. show text cursor)\r\n    setEditableName((prevValue) => !prevValue);\r\n    setTimeout(function () {\r\n      nameRef.current.focus();\r\n    }, 50);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Set name of dropblock using data from folder block\r\n    if (editableName === false) nameRef.current.innerText = item.name;\r\n  }, [item.name]);\r\n\r\n  useEffect(() => {\r\n    const updateEditableName = (e: any) => {\r\n      // When user clicks away from name, make sure the beginning of the name is shown\r\n      if (nameRef.current) {\r\n        nameRef.current.addEventListener(\"blur\", function () {\r\n          nameRef.current.scrollLeft = \"0px\";\r\n        });\r\n      }\r\n\r\n      // If user clicks outside of name of dropblock, turn off editability of name\r\n      if (editableName === true) {\r\n        if (!nameRef.current.contains(e.target)) {\r\n          setEditableName((prevValue) => !prevValue);\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener(\"click\", updateEditableName);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"click\", updateEditableName);\r\n    };\r\n  }, [editableName]);\r\n\r\n  const openDropBlock = (\r\n    type: string,\r\n    folderIndex: number,\r\n    binderIndex: any\r\n  ) => {\r\n    const newFolderBlocksArray = folderBlocks.slice();\r\n    if (type === \"folder\")\r\n      newFolderBlocksArray[folderIndex].isOpen = !newFolderBlocksArray[\r\n        folderIndex\r\n      ].isOpen;\r\n    else {\r\n      newFolderBlocksArray[folderIndex].binders[\r\n        binderIndex\r\n      ].isOpen = !newFolderBlocksArray[folderIndex].binders[binderIndex].isOpen;\r\n    }\r\n\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dekked-dropBlockContainer\">\r\n      <NavLink\r\n        activeStyle={{\r\n          background: \"var(--off-beige-clicked)\",\r\n          fontWeight: \"bold\",\r\n        }}\r\n        to={{\r\n          pathname: `${\r\n            item.type === \"studySet\"\r\n              ? `/${item.type}/${item.tab}/${item.id}`\r\n              : `/${item.type}/${item.id}`\r\n          }`,\r\n          state: {\r\n            type: item.type,\r\n            name: item.name,\r\n            folderIndex: folderIndex,\r\n            binderIndex: binderIndex,\r\n            studySetIndex: studySetIndex,\r\n            tab: item.tab,\r\n          },\r\n        }}\r\n      >\r\n        <div role=\"button\" className={`dekked-dropBlock ${item.type}`}>\r\n          {item.type !== \"studySet\" ? (\r\n            <div\r\n              className={\r\n                item.isOpen\r\n                  ? `icon active dropDownArrow down`\r\n                  : `icon active dropDownArrow right`\r\n              }\r\n              onClick={() => {\r\n                openDropBlock(item.type, folderIndex, binderIndex);\r\n              }}\r\n            >\r\n              <Icons.MdArrowDropDown />\r\n            </div>\r\n          ) : null}\r\n          <div className={`icon ${item.type}`}>\r\n            {item.type === \"folder\" ? (\r\n              <FolderIcon fill={iconColour} />\r\n            ) : item.type === \"binder\" ? (\r\n              <BinderIcon stroke={iconColour} />\r\n            ) : (\r\n              <StudySetIcon stroke={iconColour} />\r\n            )}\r\n          </div>\r\n          <span\r\n            ref={nameRef}\r\n            spellCheck=\"false\"\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                setEditableName((prevValue) => !prevValue);\r\n              }\r\n              setTimeout(function () {\r\n                handleNameChange(\r\n                  item.type,\r\n                  folderIndex,\r\n                  nameRef.current.innerText,\r\n                  binderIndex,\r\n                  studySetIndex\r\n                );\r\n              }, 100);\r\n            }}\r\n            contentEditable={editableName}\r\n            className=\"p2\"\r\n          ></span>\r\n        </div>\r\n      </NavLink>\r\n      <DropBlockDots\r\n        item={item}\r\n        handleFolderBlocks={handleFolderBlocks}\r\n        handleRename={handleRename}\r\n        handleDelete={handleDelete}\r\n        handleAddItem={handleAddItem}\r\n        setIconColour={setIconColour}\r\n        iconColour={iconColour}\r\n        folderBlocks={folderBlocks}\r\n        studySetIndex={studySetIndex}\r\n        folderIndex={folderIndex}\r\n        binderIndex={binderIndex}\r\n      ></DropBlockDots>\r\n    </div>\r\n  );\r\n};\r\nexport default DropBlock;\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\ProfileData.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlockDots.tsx",["181"],"import React, { useState, useEffect } from \"react\";\r\nimport ColourPicker from \"./ColourPicker\";\r\nimport Block from \"../General/Block\";\r\nimport Portal from \"../General/Portal\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport {MdMoreHoriz} from \"react-icons/md\";\r\nimport { FolderData, BinderData, StudySetData } from \"./DropBlockMenuData\";\r\n\r\ninterface Props {\r\n  item:any;\r\n  handleFolderBlocks: (newFolderBlocksArray:any) => void;\r\n  studySetIndex?:number;\r\n  binderIndex?:number;\r\n  folderIndex:number;\r\n  iconColour:string;\r\n  setIconColour: React.Dispatch<any>;\r\n  handleAddItem?: () => void;\r\n  handleDelete: () => void;\r\n  handleRename: () => void;\r\n  folderBlocks:{\r\n    name: string;\r\n    type: string;\r\n    id: string;\r\n    iconColour: string;\r\n    isOpen: boolean;\r\n    binders: {\r\n        name: string;\r\n        type: string;\r\n        id: string;\r\n        folderId: string;\r\n        iconColour: string;\r\n        isOpen: boolean;\r\n        studySets: {\r\n            name: string;\r\n            type: string;\r\n            id: string;\r\n            binderId:string;\r\n            folderId:string;\r\n            iconColour:string;\r\n            tab:string;\r\n            flashcards:{\r\n              type: string;\r\n              id: string;\r\n              front:string;\r\n              back:string;\r\n              studySetId:string\r\n              binderId:string;\r\n              folderId:string;\r\n            }[];\r\n        }[];\r\n    }[];\r\n  }[];\r\n\r\n}\r\n\r\nconst DropBlockDots:React.FC<Props> = ({\r\n  item,\r\n  handleFolderBlocks,\r\n  folderBlocks,\r\n  handleRename,\r\n  handleDelete,\r\n  handleAddItem,\r\n  setIconColour,\r\n  iconColour,\r\n  studySetIndex,\r\n  folderIndex,\r\n  binderIndex,\r\n}) => {\r\n  const dropBlockMenuData = item.type===\"folder\" ? FolderData : item.type===\"binder\" ? BinderData : StudySetData\r\n  const [coords, setCoords] = useState({left:0, top:0}); // Set mouse coordinates\r\n  const [dropdownMenu, setDropdownMenu] = useState(false); // Set dropdown menu visibility\r\n  const [colourPicker, setColourPicker] = useState(false); // Set visibility of colour picker component\r\n  const [yPositionOfDropdownMenu, setYPositionofDropdownMenu] = useState<number>(0); // Set y position of dropdown menu\r\n  const heightOfDropdownMenu = 30 * dropBlockMenuData.length; // Value is necessary to position dropdown menu based on mouse coordinates\r\n  const heightOfColourPicker = 220; // Value is necessary to position colour picker based on mouse coordinates\r\n \r\n  const positionComponents = (e:any, itemHeight:number) => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    let bottomValue = window.innerHeight - rect.y; // distance from mouse click to bottom of window\r\n    let topValue = rect.y; // distance from mouse click to top of window\r\n    setYPositionofDropdownMenu(topValue);\r\n\r\n    if (\r\n      bottomValue < 1.5 * heightOfColourPicker &&\r\n      topValue > heightOfColourPicker\r\n    )\r\n      setYPositionofDropdownMenu(topValue - heightOfColourPicker - 10);\r\n\r\n    if (bottomValue < 1.4 * itemHeight && topValue > itemHeight) {\r\n      topValue = rect.y - itemHeight - 10;\r\n    }\r\n\r\n    setCoords({\r\n      left: rect.x + rect.width / 2,\r\n      top: topValue,\r\n    });\r\n  };\r\n\r\n  const handleIconColour = (\r\n    type:string,\r\n    folderIndex:number,\r\n    iconColour:string,\r\n    binderIndex:any,\r\n    studySetIndex:any,\r\n  ) => {\r\n    const newFolderBlocksArray = folderBlocks.slice();\r\n    if (type === \"folder\" ) {\r\n      newFolderBlocksArray[folderIndex].iconColour = iconColour;\r\n    } else if (type === \"binder\") {\r\n      newFolderBlocksArray[folderIndex].binders[\r\n        binderIndex\r\n      ].iconColour = iconColour;\r\n    } else if (type === \"studySet\") {\r\n      newFolderBlocksArray[folderIndex].binders[binderIndex].studySets[\r\n        studySetIndex\r\n      ].iconColour = iconColour;\r\n    }\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  const handleColourPicker = () => {\r\n    const newCoords = {\r\n      left: coords.left,\r\n      top: yPositionOfDropdownMenu,\r\n    };\r\n    setCoords(newCoords);\r\n    setColourPicker((prevState) => !prevState);\r\n  };\r\n\r\n  \r\n  const handleDropdownMenu = (e:any) => {\r\n    positionComponents(e, heightOfDropdownMenu);\r\n    setDropdownMenu((prevState) => !prevState);\r\n  };\r\n  \r\n  useEffect (() => {\r\n    handleIconColour(item.type, folderIndex, iconColour, binderIndex, studySetIndex)\r\n  }, [iconColour])\r\n  \r\n  return (\r\n    <div id=\"dropBlockDots\">\r\n      <MdMoreHoriz\r\n        className=\"icon active dots\"\r\n        onClick={(e) => {\r\n          handleDropdownMenu(e);\r\n        }}\r\n      ></MdMoreHoriz>\r\n      {dropdownMenu ? (\r\n        <Portal state={dropdownMenu} handleState={() => setDropdownMenu(false)}>\r\n          <div\r\n            onClick={() => setDropdownMenu(false)}\r\n            className=\"dropdownMenu dropBlocks\"\r\n            style={{ ...coords }}\r\n          >\r\n            {dropBlockMenuData.map((item) => {\r\n              return item.action === \"Delete\" ? (\r\n                <NavLink\r\n                  to={{\r\n                    pathname: `/${folderBlocks[0].type}/${folderBlocks[0].id}`,\r\n                    state: {\r\n                      type: \"folder\",\r\n                      folderIndex: \"0\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <Block\r\n                    handleDelete={handleDelete}\r\n                    handleRename={handleRename}\r\n                    handleColourPicker={handleColourPicker}\r\n                    handleAddItem={handleAddItem}\r\n                    item={item}\r\n                    key={uuidv4()}\r\n                  />\r\n                </NavLink>\r\n              ) : (\r\n                <Block\r\n                  handleDelete={handleDelete}\r\n                  handleRename={handleRename}\r\n                  handleColourPicker={handleColourPicker}\r\n                  handleAddItem={handleAddItem}\r\n                  item={item}\r\n                  key={uuidv4()}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </Portal>\r\n      ) : null}\r\n      {colourPicker ? (\r\n        <Portal state={colourPicker} handleState={handleColourPicker}>\r\n          <div style={{ ...coords }} className=\"colourPicker\">\r\n            <ColourPicker\r\n              iconColour={iconColour}\r\n              setIconColour={setIconColour}\r\n            ></ColourPicker>\r\n          </div>\r\n        </Portal>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropBlockDots;\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlockMenuData.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\SidebarTop.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\SidebarBottom.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\Sidebar.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\LoadingSpinner.tsx",["182","183","184"],"import React, { useState, useEffect } from \"react\";\r\nimport { ReactComponent as LogoIcon } from \"../../custom-icons/logo.svg\";\r\nimport \"./LoadingSpinner.css\";\r\n\r\ninterface LoadingSpinnerProps {}\r\n\r\nexport const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({}) => {\r\n  return (\r\n    <div id=\"loadingScreen\">\r\n      <LogoIcon className=\"icon logo\" stroke=\"#00A7BE\" />\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\SidebarWorkspace.tsx",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\StudySet\\StudySetTabs.tsx",[],{"ruleId":"185","severity":1,"message":"186","line":10,"column":25,"nodeType":"187","messageId":"188","endLine":10,"endColumn":41},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","replacedBy":"192"},{"ruleId":"189","replacedBy":"193"},{"ruleId":"191","replacedBy":"194"},{"ruleId":"189","replacedBy":"195"},{"ruleId":"191","replacedBy":"196"},{"ruleId":"189","replacedBy":"197"},{"ruleId":"191","replacedBy":"198"},{"ruleId":"189","replacedBy":"199"},{"ruleId":"191","replacedBy":"200"},{"ruleId":"189","replacedBy":"201"},{"ruleId":"191","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":60,"column":6,"nodeType":"205","endLine":60,"endColumn":22,"suggestions":"206"},{"ruleId":"203","severity":1,"message":"204","line":54,"column":6,"nodeType":"205","endLine":54,"endColumn":22,"suggestions":"207"},{"ruleId":"189","replacedBy":"208"},{"ruleId":"191","replacedBy":"209"},{"ruleId":"203","severity":1,"message":"210","line":87,"column":6,"nodeType":"205","endLine":87,"endColumn":17,"suggestions":"211"},{"ruleId":"203","severity":1,"message":"212","line":139,"column":6,"nodeType":"205","endLine":139,"endColumn":18,"suggestions":"213"},{"ruleId":"185","severity":1,"message":"214","line":1,"column":17,"nodeType":"187","messageId":"188","endLine":1,"endColumn":25},{"ruleId":"185","severity":1,"message":"215","line":1,"column":27,"nodeType":"187","messageId":"188","endLine":1,"endColumn":36},{"ruleId":"216","severity":1,"message":"217","line":7,"column":63,"nodeType":"218","messageId":"219","endLine":7,"endColumn":65},"@typescript-eslint/no-unused-vars","'setNotifications' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["220"],"no-negated-in-lhs",["221"],["220"],["221"],["220"],["221"],["220"],["221"],["220"],["221"],["220"],["221"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleTab'. Either include it or remove the dependency array.","ArrayExpression",["222"],["223"],["220"],["221"],"React Hook useEffect has a missing dependency: 'editableName'. Either include it or remove the dependency array.",["224"],"React Hook useEffect has missing dependencies: 'binderIndex', 'folderIndex', 'handleIconColour', 'item.type', and 'studySetIndex'. Either include them or remove the dependency array.",["225"],"'useState' is defined but never used.","'useEffect' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation",{"desc":"226","fix":"227"},{"desc":"226","fix":"228"},{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},"Update the dependencies array to be: [handleTab, location.state]",{"range":"233","text":"234"},{"range":"235","text":"234"},"Update the dependencies array to be: [editableName, item.name]",{"range":"236","text":"237"},"Update the dependencies array to be: [binderIndex, folderIndex, handleIconColour, iconColour, item.type, studySetIndex]",{"range":"238","text":"239"},[1623,1639],"[handleTab, location.state]",[1502,1518],[2354,2365],"[editableName, item.name]",[4394,4406],"[binderIndex, folderIndex, handleIconColour, iconColour, item.type, studySetIndex]"]