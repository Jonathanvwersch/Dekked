[{"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\TopBar.js":"1","C:\\Users\\jonat\\dekked-nav-bar\\src\\App.js":"2","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlock.js":"3"},{"size":902,"mtime":1607968457926,"results":"4","hashOfConfig":"5"},{"size":2706,"mtime":1608375339853,"results":"6","hashOfConfig":"5"},{"size":8456,"mtime":1608377270774,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mc2jll",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\TopBar.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\App.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlock.js",["15","16"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as Icons from \"react-icons/md\";\r\nimport \"./DropBlock.css\";\r\nimport ColourPicker from \"./ColourPicker\";\r\nimport Block from \"../General/Block\";\r\nimport Portal from \"../General/Portal\";\r\nimport { ReactComponent as FolderIcon } from \"../../custom-icons/folder.svg\";\r\nimport { ReactComponent as BinderIcon } from \"../../custom-icons/binder.svg\";\r\nimport { ReactComponent as StudySetIcon } from \"../../custom-icons/studyset.svg\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nfunction DropBlock({\r\n  type,\r\n  handleDelete,\r\n  handleAddItem,\r\n  id,\r\n  isExpanded,\r\n  isOpen,\r\n  dropBlockMenuData,\r\n  handleNameChange,\r\n  folderIndex,\r\n  binderIndex,\r\n  studySetIndex,\r\n  handleIconColour,\r\n  folderBlocks,\r\n}) {\r\n  const [coords, setCoords] = useState({}); // Set mouse coordinates\r\n  const [dropdownMenu, setDropdownMenu] = useState(false); // Set dropdown menu visibility\r\n  const [editableName, setEditableName] = useState(false); // Set name of dropblock to be editable so that you can rename block\r\n  const [colourPicker, setColourPicker] = useState(false); // Set visibility of colour picker component\r\n  const [yPositionOfDropdownMenu, setYPositionofDropdownMenu] = useState(); // Set y position of dropdown menu\r\n  const [iconColour, setIconColour] = useState(\"#2C2C31\"); // Set colour of icons (necessary to change colours using colour picker)\r\n\r\n  const nameRef = useRef(null); // Reference name of block to deactivate focus after renaming block\r\n\r\n  const heightOfDropdownMenu = 30 * dropBlockMenuData.length; // Value is necessary to position dropdown menu based on mouse coordinates\r\n  const heightOfColourPicker = 220; // Value is necessary to position colour picker based on mouse coordinates\r\n\r\n  // Position portal components based on mouse coordinates\r\n  const positionComponents = (e, itemHeight) => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    let bottomValue = window.innerHeight - rect.y; // distance from mouse click to bottom of window\r\n    let topValue = rect.y; // distance from mouse click to top of window\r\n    setYPositionofDropdownMenu(topValue);\r\n\r\n    if (\r\n      bottomValue < 1.5 * heightOfColourPicker &&\r\n      topValue > heightOfColourPicker\r\n    )\r\n      setYPositionofDropdownMenu(topValue - heightOfColourPicker - 10);\r\n\r\n    if (bottomValue < 1.4 * itemHeight && topValue > itemHeight) {\r\n      topValue = rect.y - itemHeight - 10;\r\n    }\r\n\r\n    setCoords({\r\n      left: rect.x + rect.width / 2,\r\n      top: topValue,\r\n    });\r\n  };\r\n\r\n  const handleColourPicker = () => {\r\n    const newCoords = {\r\n      left: coords.left,\r\n      top: yPositionOfDropdownMenu,\r\n    };\r\n    setCoords(newCoords);\r\n    setColourPicker((prevState) => !prevState);\r\n    handleIconColour(type, folderIndex, binderIndex, studySetIndex, iconColour);\r\n  };\r\n\r\n  const handleRename = () => {\r\n    // Focus in on name of dropblock when being renamed (i.e. show text cursor)\r\n    var div = document.querySelector(`p[id=\"${id}\"]`);\r\n    setTimeout(function () {\r\n      setEditableName((prevValue) => !prevValue);\r\n      div.focus();\r\n    }, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editableName === false) {\r\n      if (type === \"folder\") {\r\n        nameRef.current.innerText = folderBlocks[folderIndex].name;\r\n      } else if (type === \"binder\") {\r\n        nameRef.current.innerText =\r\n          folderBlocks[folderIndex].binders[binderIndex].name;\r\n      } else if (type === \"studySet\") {\r\n        nameRef.current.innerText =\r\n          folderBlocks[folderIndex].binders[binderIndex].studySets[\r\n            studySetIndex\r\n          ].name;\r\n      }\r\n    }\r\n  }, [folderBlocks]);\r\n\r\n  const handleDropdownMenu = (e) => {\r\n    positionComponents(e, heightOfDropdownMenu);\r\n    setDropdownMenu((prevState) => !prevState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const updateEditableName = (e) => {\r\n      // When user clicks away from name, make sure the beginning of the name is shown\r\n      let fileName = document.querySelector(`p[id=\"${id}\"]`);\r\n      if (fileName) {\r\n        fileName.addEventListener(\r\n          \"blur\",\r\n          function (e) {\r\n            this.scrollLeft = \"0px\";\r\n          },\r\n          true\r\n        );\r\n      }\r\n\r\n      // If user clicks outside of name of dropblock, turn off editability of name\r\n      if (editableName === true) {\r\n        if (!nameRef.current.contains(e.target)) {\r\n          setEditableName((prevValue) => !prevValue);\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener(\"click\", updateEditableName);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"click\", updateEditableName);\r\n    };\r\n  }, [editableName]);\r\n\r\n  return (\r\n    <div role=\"button\" className=\"DropBlock\">\r\n      <div\r\n        className={\r\n          isOpen\r\n            ? `icon active ${type} dropDownArrow down`\r\n            : `icon active ${type} dropDownArrow right`\r\n        }\r\n        onClick={() => {\r\n          isExpanded();\r\n        }}\r\n      >\r\n        {type !== \"studySet\" ? <Icons.MdArrowDropDown /> : null}\r\n      </div>\r\n      <div className={`icon ${type}`}>\r\n        {type === \"folder\" ? (\r\n          <FolderIcon fill={iconColour} />\r\n        ) : type === \"binder\" ? (\r\n          <BinderIcon stroke={iconColour} />\r\n        ) : (\r\n          <StudySetIcon stroke={iconColour} />\r\n        )}\r\n      </div>\r\n      <p\r\n        ref={nameRef}\r\n        id={id}\r\n        spellCheck=\"false\"\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            setEditableName((prevValue) => !prevValue);\r\n          }\r\n          setTimeout(function () {\r\n            handleNameChange(\r\n              type,\r\n              folderIndex,\r\n              binderIndex,\r\n              studySetIndex,\r\n              nameRef.current.innerText\r\n            );\r\n          }, 100);\r\n        }}\r\n        contentEditable={editableName}\r\n        className=\"p2\"\r\n      ></p>\r\n      <Icons.MdMoreHoriz\r\n        className=\"icon active dots\"\r\n        onClick={(e) => {\r\n          handleDropdownMenu(e);\r\n        }}\r\n      ></Icons.MdMoreHoriz>\r\n      {dropdownMenu ? (\r\n        <Portal\r\n          state={dropdownMenu}\r\n          handleState={() => setDropdownMenu((prevState) => !prevState)}\r\n        >\r\n          <div\r\n            onClick={() => setDropdownMenu((prevState) => !prevState)}\r\n            className=\"dropdownMenu\"\r\n            style={{ ...styles.popover, ...coords }}\r\n          >\r\n            {dropBlockMenuData.map((item, index) => {\r\n              return item.action === \"Delete\" ? (\r\n                <NavLink\r\n                  to={{\r\n                    pathname: `/${folderBlocks[0].type}/${folderBlocks[0].id}`,\r\n                    state: {\r\n                      type: \"folder\",\r\n                      folderIndex: \"0\",\r\n                    },\r\n                  }}\r\n                >\r\n                  <Block\r\n                    handleDelete={handleDelete}\r\n                    handleRename={handleRename}\r\n                    handleColourPicker={handleColourPicker}\r\n                    handleAddItem={handleAddItem}\r\n                    showDropBlocks={isExpanded}\r\n                    item={item}\r\n                    id={`${item} Block ${index}`}\r\n                    key={`${item} Block ${index}`}\r\n                  />\r\n                </NavLink>\r\n              ) : (\r\n                <Block\r\n                  handleDelete={handleDelete}\r\n                  handleRename={handleRename}\r\n                  handleColourPicker={handleColourPicker}\r\n                  handleAddItem={handleAddItem}\r\n                  showDropBlocks={isExpanded}\r\n                  item={item}\r\n                  id={`${item} Block ${index}`}\r\n                  key={`${item} Block ${index}`}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </Portal>\r\n      ) : null}\r\n      {colourPicker ? (\r\n        <Portal state={colourPicker} handleState={handleColourPicker}>\r\n          <div\r\n            style={{ ...styles.popover, ...coords }}\r\n            className=\"colourPicker\"\r\n          >\r\n            <ColourPicker\r\n              iconColour={iconColour}\r\n              setIconColour={setIconColour}\r\n            ></ColourPicker>\r\n          </div>\r\n        </Portal>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  popover: {\r\n    position: \"absolute\",\r\n    transform: \"translate(0, 15px)\",\r\n  },\r\n};\r\n\r\nexport default withRouter(DropBlock);\r\n",{"ruleId":"17","severity":1,"message":"18","line":96,"column":6,"nodeType":"19","endLine":96,"endColumn":20,"suggestions":"20"},{"ruleId":"17","severity":1,"message":"21","line":129,"column":6,"nodeType":"19","endLine":129,"endColumn":20,"suggestions":"22"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'binderIndex', 'editableName', 'folderIndex', 'studySetIndex', and 'type'. Either include them or remove the dependency array.","ArrayExpression",["23"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["24"],{"desc":"25","fix":"26"},{"desc":"27","fix":"28"},"Update the dependencies array to be: [binderIndex, editableName, folderBlocks, folderIndex, studySetIndex, type]",{"range":"29","text":"30"},"Update the dependencies array to be: [editableName, id]",{"range":"31","text":"32"},[3701,3715],"[binderIndex, editableName, folderBlocks, folderIndex, studySetIndex, type]",[4692,4706],"[editableName, id]"]