[{"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\MainFrame.js":"1","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\PageContent.js":"2","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\Card.js":"3","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\Sidebar.js":"4","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\ChangePassword.js":"5","C:\\Users\\jonat\\dekked-nav-bar\\src\\App.js":"6","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlock.js":"7","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\AddCard.js":"8","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\Portal.js":"9","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\TopBar.js":"10","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\StudyQueue.js":"11","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\SettingsData.js":"12","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\Settings.js":"13","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\Block.js":"14","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\Account.js":"15"},{"size":4682,"mtime":1608319121829,"results":"16","hashOfConfig":"17"},{"size":4833,"mtime":1608318942193,"results":"18","hashOfConfig":"17"},{"size":1006,"mtime":1608284006403,"results":"19","hashOfConfig":"17"},{"size":14817,"mtime":1608304080702,"results":"20","hashOfConfig":"17"},{"size":1011,"mtime":1607766673139,"results":"21","hashOfConfig":"17"},{"size":2645,"mtime":1608304750225,"results":"22","hashOfConfig":"17"},{"size":7529,"mtime":1608309167335,"results":"23","hashOfConfig":"17"},{"size":323,"mtime":1608219716559,"results":"24","hashOfConfig":"17"},{"size":1748,"mtime":1607766924730,"results":"25","hashOfConfig":"17"},{"size":902,"mtime":1607968457926,"results":"26","hashOfConfig":"17"},{"size":1746,"mtime":1607968571698,"results":"27","hashOfConfig":"17"},{"size":310,"mtime":1607681517857,"results":"28","hashOfConfig":"17"},{"size":1500,"mtime":1607975279825,"results":"29","hashOfConfig":"17"},{"size":1098,"mtime":1608023061006,"results":"30","hashOfConfig":"17"},{"size":1947,"mtime":1608043484373,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},"1mc2jll",{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\MainFrame.js",["66","67"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Button from \"../Buttons/Button\";\r\nimport StudyQueue from \"../General/StudyQueue\";\r\nimport PageContent from \"./PageContent\";\r\nimport TopBar from \"./TopBar\";\r\nimport { useLocation, withRouter } from \"react-router\";\r\nimport \"./MainFrame.css\";\r\n\r\nfunction MainFrame({\r\n  sidebar,\r\n  handleSidebar,\r\n  folderBlocks,\r\n  handleFolderBlocks,\r\n  handleNameChange,\r\n}) {\r\n  const expandedSidebarWidth = 220;\r\n  const [frameWidth, setFrameWidth] = useState(\r\n    window.innerWidth - (sidebar ? expandedSidebarWidth : 0)\r\n  );\r\n\r\n  const titleRef = useRef();\r\n  let location = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (sidebar) setFrameWidth(window.innerWidth - expandedSidebarWidth);\r\n    else setFrameWidth(window.innerWidth);\r\n  }, [sidebar]);\r\n\r\n  //Update frame width on each rerender\r\n  useEffect(() => {\r\n    const updateWindowDimensions = () => {\r\n      const newFrameWidth = window.innerWidth - sidebarWidth;\r\n      setFrameWidth(newFrameWidth);\r\n    };\r\n    const sidebarWidth = sidebar ? expandedSidebarWidth : 0;\r\n    window.addEventListener(\"resize\", updateWindowDimensions);\r\n    return () => {\r\n      return window.removeEventListener(\"resize\", updateWindowDimensions);\r\n    };\r\n  });\r\n  useEffect(() => {\r\n    if (location.state && document.activeElement !== titleRef.current) {\r\n      if (location.state.type === \"folder\") {\r\n        titleRef.current.innerText =\r\n          folderBlocks[location.state.folderIndex].name;\r\n      } else if (location.state.type === \"binder\") {\r\n        titleRef.current.innerText =\r\n          folderBlocks[location.state.folderIndex].binders[\r\n            location.state.binderIndex\r\n          ].name;\r\n      } else {\r\n        titleRef.current.innerText =\r\n          folderBlocks[location.state.folderIndex].binders[\r\n            location.state.binderIndex\r\n          ].studySets[location.state.studySetIndex].name;\r\n      }\r\n    }\r\n  }, [folderBlocks, location.state]);\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"dekked-frame\"\r\n        style={{\r\n          flexGrow: \"1\",\r\n          flexShrink: \"1\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          background: \"white\",\r\n          zIndex: \"1\",\r\n          height: \"100vh\",\r\n          maxHeight: \"100%\",\r\n          width: `${frameWidth}px`,\r\n        }}\r\n      >\r\n        <div style={{ width: \"100%\", maxWidth: \"100vw\", zIndex: \"9\" }}>\r\n          <TopBar sidebar={sidebar} handleSidebar={handleSidebar} />\r\n        </div>\r\n        <div className=\"dekked-page-content-container\">\r\n          <div className=\"page-header-container\">\r\n            <div className=\"page-header\">\r\n              <div className=\"page-title\">\r\n                <h2\r\n                  contentEditable={true}\r\n                  ref={titleRef}\r\n                  spellCheck={false}\r\n                  onKeyDown={(e) => {\r\n                    if (location.state) {\r\n                      if (e.key === \"Enter\") {\r\n                        e.preventDefault();\r\n                      }\r\n                      setTimeout(function () {\r\n                        handleNameChange(\r\n                          location.state.type,\r\n                          location.state.folderIndex,\r\n                          location.state.binderIndex,\r\n                          location.state.studySetIndex,\r\n                          titleRef.current.innerText\r\n                        );\r\n                      }, 100);\r\n                    }\r\n                  }}\r\n                ></h2>\r\n              </div>\r\n              <div id=\"button-quantity\">\r\n                <p className=\"p2 quantity\">\r\n                  {location.state\r\n                    ? location.state.type === \"folder\"\r\n                      ? `${\r\n                          folderBlocks[location.state.folderIndex].binders\r\n                            .length\r\n                        } binder(s)`\r\n                      : `${\r\n                          folderBlocks[location.state.folderIndex].binders[\r\n                            location.state.binderIndex\r\n                          ].studySets.length\r\n                        } study set(s)`\r\n                    : null}\r\n                </p>\r\n                <Button type=\"primary\" action=\"Study\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"dekked-page-content\"></div>\r\n        </div>\r\n        {/* <PageContent\r\n          folderBlocks={folderBlocks}\r\n          handleFolderBlocks={handleFolderBlocks}\r\n          handleNameChange={handleNameChange}\r\n        /> */}\r\n        <StudyQueue />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default withRouter(MainFrame);\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\PageContent.js",["68","69"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\Card.js",["70"],"import React, { useState } from \"react\";\r\nimport \"./Card.css\";\r\nimport { ReactComponent as BinderIcon } from \"../../custom-icons/binder.svg\";\r\nimport { ReactComponent as StudySetIcon } from \"../../custom-icons/studyset.svg\";\r\n\r\nfunction Card({ name, type, iconColour }) {\r\n  let date = new Date();\r\n  const options = {\r\n    year: \"numeric\",\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n  };\r\n\r\n  return (\r\n    <div id=\"card\">\r\n      <div id=\"card-thumbnail\"></div>\r\n      <div id=\"card-description\">\r\n        <div id=\"card-name\">\r\n          <p className=\"p2\">{name}</p>\r\n        </div>\r\n        <div id=\"card-date\">\r\n          <div className={`icon ${type}`}>\r\n            {type === \"binder\" ? (\r\n              <BinderIcon stroke={iconColour} />\r\n            ) : (\r\n              <StudySetIcon stroke={iconColour} />\r\n            )}\r\n          </div>\r\n          <p className=\"p3\">Created {date.toLocaleString(\"en-US\", options)}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\Sidebar.js",["71","72"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as Icons from \"react-icons/md\";\r\nimport DropBlock from \"./DropBlock\";\r\nimport \"./Sidebar.css\";\r\nimport { Icon } from \"@iconify/react\";\r\nimport chevronDoubleLeft from \"@iconify/icons-mdi/chevron-double-left\";\r\nimport { FolderData, BinderData, StudySetData } from \"./DropBlockMenuData\";\r\nimport { ProfileData } from \"./ProfileData\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport Portal from \"../General/Portal\";\r\nimport Block from \"../General/Block\";\r\nimport Settings from \"../Settings/Settings\";\r\n\r\nfunction Sidebar({\r\n  sidebar,\r\n  handleSidebar,\r\n  folderBlocks,\r\n  handleFolderBlocks,\r\n  handleNameChange,\r\n}) {\r\n  const [profileMenu, setProfileMenu] = useState(false);\r\n  const [settingsPage, setSettingsPage] = useState(false);\r\n\r\n  const addFolder = () => {\r\n    const newFolder = {\r\n      name: \"\",\r\n      type: \"folder\",\r\n      id: Math.random(),\r\n      iconColour: \"#2C2C31\",\r\n      isOpen: false,\r\n      binders: [],\r\n    };\r\n    handleFolderBlocks((folderBlocks) => [...folderBlocks, newFolder]);\r\n  };\r\n\r\n  const openFolderBlock = (folderIndex) => {\r\n    const newFolderBlocksArray = folderBlocks.slice(); //make copy of array of folder blocks\r\n    newFolderBlocksArray[folderIndex].isOpen = !newFolderBlocksArray[\r\n      folderIndex\r\n    ].isOpen; // Invert folder block's open status\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  const addBinder = (folderIndex) => {\r\n    const newBinder = {\r\n      name: \"\",\r\n      type: \"binder\",\r\n      id: Math.random(),\r\n      iconColour: \"#2C2C31\",\r\n      isOpen: false,\r\n      studySets: [],\r\n    };\r\n    const newFolderBlocksArray = folderBlocks.slice();\r\n    newFolderBlocksArray[folderIndex].isOpen = true;\r\n    newFolderBlocksArray[folderIndex].binders.push(newBinder);\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  const openBinderBlock = (folderIndex, binderIndex) => {\r\n    const newFolderBlocksArray = folderBlocks.slice();\r\n    newFolderBlocksArray[folderIndex].binders[\r\n      binderIndex\r\n    ].isOpen = !newFolderBlocksArray[folderIndex].binders[binderIndex].isOpen;\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  const addStudySet = (folderIndex, binderIndex) => {\r\n    const newStudySet = {\r\n      name: \"\",\r\n      type: \"studySet\",\r\n      id: Math.random(),\r\n      iconColour: \"#2C2C31\",\r\n    };\r\n    const newFolderBlocksArray = folderBlocks.slice();\r\n    newFolderBlocksArray[folderIndex].binders[binderIndex].studySets.push(\r\n      newStudySet\r\n    );\r\n\r\n    newFolderBlocksArray[folderIndex].binders[binderIndex].isOpen = true;\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  const deleteBlock = (id, type, folderIndex, binderIndex, studySetIndex) => {\r\n    let array;\r\n\r\n    if (type === \"folder\")\r\n      array = folderBlocks.filter((folderBlock) => folderBlock.id !== id);\r\n    else if (type === \"binder\") {\r\n      array = folderBlocks.slice();\r\n      array[folderIndex].binders.splice(binderIndex, 1);\r\n    } else if (type === \"studySet\") {\r\n      array = folderBlocks.slice();\r\n      array[folderIndex].binders[binderIndex].studySets.splice(\r\n        studySetIndex,\r\n        1\r\n      );\r\n    }\r\n    handleFolderBlocks(array);\r\n\r\n    if (folderBlocks.length === 1) \r\n       addFolder();\r\n    \r\n  };\r\n\r\n  const handleSettings = () => {\r\n    setSettingsPage((prevState) => !prevState);\r\n  };\r\n\r\n  const handleIconColour = (\r\n    type,\r\n    folderIndex,\r\n    binderIndex,\r\n    studySetIndex,\r\n    iconColour\r\n  ) => {\r\n    const newFolderBlocksArray = folderBlocks.slice();\r\n    if (type === \"folder\") {\r\n      newFolderBlocksArray[folderIndex].iconColour = iconColour;\r\n    } else if (type === \"binder\") {\r\n      newFolderBlocksArray[folderIndex].binders[\r\n        binderIndex\r\n      ].iconColour = iconColour;\r\n    } else if (type === \"studySet\") {\r\n      newFolderBlocksArray[folderIndex].binders[binderIndex].studySets[\r\n        studySetIndex\r\n      ].iconColour = iconColour;\r\n    }\r\n    handleFolderBlocks(newFolderBlocksArray);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {sidebar ? (\r\n        <div className=\"dekked-sidebar-container\">\r\n          <div className=\"dekked-sidebar\">\r\n            <div className=\"sidebar-top\">\r\n              <div className=\"profile\">\r\n                <div className=\"avatar\">\r\n                  <p className=\"p1\">J</p>\r\n                </div>\r\n                <p className=\"p3\">Jane Doe</p>\r\n                <div\r\n                  className=\"icon active dropDownArrow down\"\r\n                  onClick={setProfileMenu}\r\n                >\r\n                  <Icons.MdArrowDropDown />\r\n                </div>\r\n                {profileMenu ? (\r\n                  <Portal\r\n                    state={profileMenu}\r\n                    handleState={() =>\r\n                      setProfileMenu((prevState) => !prevState)\r\n                    }\r\n                  >\r\n                    <div\r\n                      className=\"dropdownMenu settingsMenu\"\r\n                      onClick={() => setProfileMenu((prevState) => !prevState)}\r\n                    >\r\n                      {ProfileData.map((item, index) => {\r\n                        return (\r\n                          <Block\r\n                            item={item}\r\n                            key={`${item} Block ${index}`}\r\n                            handleSettings={handleSettings}\r\n                          />\r\n                        );\r\n                      })}\r\n                    </div>\r\n                  </Portal>\r\n                ) : null}\r\n                {settingsPage ? (\r\n                  <Portal\r\n                    state={settingsPage}\r\n                    handleState={handleSettings}\r\n                    lightbox={true}\r\n                    center={true}\r\n                    close={true}\r\n                  >\r\n                    <Settings handleState={handleSettings} />\r\n                  </Portal>\r\n                ) : null}\r\n              </div>\r\n              <div\r\n                className=\"icon active chevronDoubleLeft\"\r\n                onClick={handleSidebar}\r\n              >\r\n                <Icon icon={chevronDoubleLeft} />\r\n              </div>\r\n            </div>\r\n            <div className=\"workspace\">\r\n              <div className=\"title\">\r\n                <p className=\"p2\">Workspace</p>\r\n              </div>\r\n              <div className=\"folderBlocks\">\r\n                {folderBlocks.map((folder, folderIndex) => (\r\n                  <div key={folder.id} className=\"folderBlock\">\r\n                    <NavLink\r\n                      activeStyle={{\r\n                        background: \"var(--off-beige-clicked)\",\r\n                        fontWeight: \"700\",\r\n                      }}\r\n                      to={{\r\n                        pathname: `/${folder.type}/${folder.id}`,\r\n                        state: {\r\n                          type: folder.type,\r\n                          name: folder.name,\r\n                          folderIndex: folderIndex,\r\n                        },\r\n                      }}\r\n                    >\r\n                      <DropBlock\r\n                        name={folder.name}\r\n                        type={folder.type}\r\n                        folderIndex={folderIndex}\r\n                        key={folder.id}\r\n                        id={folder.id}\r\n                        handleDelete={() => deleteBlock(folder.id, folder.type)}\r\n                        handleAddItem={() => addBinder(folderIndex)}\r\n                        isExpanded={() => openFolderBlock(folderIndex)}\r\n                        isOpen={folder.isOpen}\r\n                        dropBlockMenuData={FolderData}\r\n                        handleNameChange={handleNameChange}\r\n                        handleIconColour={handleIconColour}\r\n                        folderBlocks={folderBlocks}\r\n\r\n                      />\r\n                    </NavLink>\r\n                    {folder.isOpen ? (\r\n                      folder.binders.length === 0 ? (\r\n                        <div className=\"noBinders\">\r\n                          <p className=\"p2\">No binders inside</p>\r\n                        </div>\r\n                      ) : (\r\n                        folder.binders.map((binder, binderIndex) => (\r\n                          <div\r\n                            key={binder.id}\r\n                            style={{\r\n                              background: \"var(--off-beige)\",\r\n                            }}\r\n                            className=\"binderBlock\"\r\n                          >\r\n                            <NavLink\r\n                              activeStyle={{\r\n                                background: \"var(--off-beige-clicked)\",\r\n                                fontWeight: \"700\",\r\n                              }}\r\n                              to={{\r\n                                pathname: `/${binder.type}/${binder.id}`,\r\n                                state: {\r\n                                  type: binder.type,\r\n                                  name: binder.name,\r\n                                  folderIndex: folderIndex,\r\n                                  binderIndex: binderIndex,\r\n                                },\r\n                              }}\r\n                            >\r\n                              <DropBlock\r\n                                name={binder.name}\r\n                                type={binder.type}\r\n                                key={binder.id}\r\n                                id={binder.id}\r\n                                handleDelete={() =>\r\n                                  deleteBlock(\r\n                                    binder.id,\r\n                                    binder.type,\r\n                                    folderIndex,\r\n                                    binderIndex\r\n                                  )\r\n                                }\r\n                                folderIndex={folderIndex}\r\n                                binderIndex={binderIndex}\r\n                                handleAddItem={() =>\r\n                                  addStudySet(folderIndex, binderIndex)\r\n                                }\r\n                                isExpanded={() =>\r\n                                  openBinderBlock(folderIndex, binderIndex)\r\n                                }\r\n                                isOpen={binder.isOpen}\r\n                                handleNameChange={handleNameChange}\r\n                                dropBlockMenuData={BinderData}\r\n                                handleIconColour={handleIconColour}\r\n                                folderBlocks={folderBlocks}\r\n                              />\r\n                            </NavLink>\r\n                            {binder.isOpen ? (\r\n                              binder.studySets.length === 0 ? (\r\n                                <div className=\"noStudySets\">\r\n                                  <p className=\"p2\">No study sets inside</p>\r\n                                </div>\r\n                              ) : (\r\n                                binder.studySets.map(\r\n                                  (studySet, studySetIndex) => (\r\n                                    <div\r\n                                      key={studySet.id}\r\n                                      className=\"studySetBlock\"\r\n                                      style={{\r\n                                        background: \"var(--off-beige)\",\r\n                                      }}\r\n                                    >\r\n                                      <NavLink\r\n                                        activeStyle={{\r\n                                          background:\r\n                                            \"var(--off-beige-clicked)\",\r\n                                          fontWeight: \"700\",\r\n                                        }}\r\n                                        to={{\r\n                                          pathname: `/${studySet.type}/${studySet.id}`,\r\n                                          state: {\r\n                                            type: studySet.type,\r\n                                            name: studySet.name,\r\n                                            folderIndex: folderIndex,\r\n                                            binderIndex: binderIndex,\r\n                                            studySetIndex: studySetIndex,\r\n                                          },\r\n                                        }}\r\n                                      >\r\n                                        <DropBlock\r\n                                          name={studySet.name}\r\n                                          type={studySet.type}\r\n                                          key={studySet.id}\r\n                                          id={studySet.id}\r\n                                          folderIndex={folderIndex}\r\n                                          binderIndex={binderIndex}\r\n                                          studySetIndex={studySetIndex}\r\n                                          handleDelete={() =>\r\n                                            deleteBlock(\r\n                                              studySet.id,\r\n                                              studySet.type,\r\n                                              folderIndex,\r\n                                              binderIndex,\r\n                                              studySetIndex\r\n                                            )\r\n                                          }\r\n                                          dropBlockMenuData={StudySetData}\r\n                                          handleNameChange={handleNameChange}\r\n                                          handleIconColour={handleIconColour}\r\n                                          folderBlocks={folderBlocks}\r\n\r\n                                        />\r\n                                      </NavLink>\r\n                                    </div>\r\n                                  )\r\n                                )\r\n                              )\r\n                            ) : null}\r\n                          </div>\r\n                        ))\r\n                      )\r\n                    ) : null}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n            <div onClick={addFolder} className=\"sidebar-bottom\">\r\n              <div className=\"addBlock\">\r\n                <div className=\"icon plus\">\r\n                  <Icons.MdAdd />\r\n                </div>\r\n                <div className=\"addFolder\">\r\n                  <p className=\"p1\">Add folder</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\ChangePassword.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\App.js",["73"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Sidebar\\DropBlock.js",["74","75"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport * as Icons from \"react-icons/md\";\r\nimport \"./DropBlock.css\";\r\nimport ColourPicker from \"./ColourPicker\";\r\nimport Block from \"../General/Block\";\r\nimport Portal from \"../General/Portal\";\r\nimport { ReactComponent as FolderIcon } from \"../../custom-icons/folder.svg\";\r\nimport { ReactComponent as BinderIcon } from \"../../custom-icons/binder.svg\";\r\nimport { ReactComponent as StudySetIcon } from \"../../custom-icons/studyset.svg\";\r\n\r\nfunction DropBlock({\r\n  type,\r\n  handleDelete,\r\n  handleAddItem,\r\n  id,\r\n  isExpanded,\r\n  isOpen,\r\n  dropBlockMenuData,\r\n  handleNameChange,\r\n  folderIndex,\r\n  binderIndex,\r\n  studySetIndex,\r\n  handleIconColour,\r\n  folderBlocks,\r\n}) {\r\n  const [coords, setCoords] = useState({}); // Set mouse coordinates\r\n  const [dropdownMenu, setDropdownMenu] = useState(false); // Set dropdown menu visibility\r\n  const [editableName, setEditableName] = useState(false); // Set name of dropblock to be editable so that you can rename block\r\n  const [colourPicker, setColourPicker] = useState(false); // Set visibility of colour picker component\r\n  const [yPositionOfDropdownMenu, setYPositionofDropdownMenu] = useState(); // Set y position of dropdown menu\r\n  const [iconColour, setIconColour] = useState(\"#2C2C31\"); // Set colour of icons (necessary to change colours using colour picker)\r\n\r\n  const nameRef = useRef(null); // Reference name of block to deactivate focus after renaming block\r\n\r\n  const heightOfDropdownMenu = 30 * dropBlockMenuData.length; // Value is necessary to position dropdown menu based on mouse coordinates\r\n  const heightOfColourPicker = 220; // Value is necessary to position colour picker based on mouse coordinates\r\n\r\n  // Position portal components based on mouse coordinates\r\n  const positionComponents = (e, itemHeight) => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    let bottomValue = window.innerHeight - rect.y; // distance from mouse click to bottom of window\r\n    let topValue = rect.y; // distance from mouse click to top of window\r\n    setYPositionofDropdownMenu(topValue);\r\n\r\n    if (\r\n      bottomValue < 1.5 * heightOfColourPicker &&\r\n      topValue > heightOfColourPicker\r\n    )\r\n      setYPositionofDropdownMenu(topValue - heightOfColourPicker - 10);\r\n\r\n    if (bottomValue < 1.4 * itemHeight && topValue > itemHeight) {\r\n      topValue = rect.y - itemHeight - 10;\r\n    }\r\n\r\n    setCoords({\r\n      left: rect.x + rect.width / 2,\r\n      top: topValue,\r\n    });\r\n  };\r\n\r\n  const handleColourPicker = () => {\r\n    const newCoords = {\r\n      left: coords.left,\r\n      top: yPositionOfDropdownMenu,\r\n    };\r\n    setCoords(newCoords);\r\n    setColourPicker((prevState) => !prevState);\r\n    handleIconColour(type, folderIndex, binderIndex, studySetIndex, iconColour);\r\n  };\r\n\r\n  const handleRename = () => {\r\n    // Focus in on name of dropblock when being renamed (i.e. show text cursor)\r\n    var div = document.querySelector(`p[id=\"${id}\"]`);\r\n    setTimeout(function () {\r\n      setEditableName((prevValue) => !prevValue);\r\n      div.focus();\r\n    }, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editableName === false) {\r\n      if (type === \"folder\") {\r\n        nameRef.current.innerText = folderBlocks[folderIndex].name;\r\n      } else if (type === \"binder\") {\r\n        nameRef.current.innerText =\r\n          folderBlocks[folderIndex].binders[binderIndex].name;\r\n      } else if (type === \"studySet\") {\r\n        nameRef.current.innerText =\r\n          folderBlocks[folderIndex].binders[binderIndex].studySets[\r\n            studySetIndex\r\n          ].name;\r\n      }\r\n    }\r\n  }, [folderBlocks]);\r\n\r\n  const handleDropdownMenu = (e) => {\r\n    positionComponents(e, heightOfDropdownMenu);\r\n    setDropdownMenu((prevState) => !prevState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const updateEditableName = (e) => {\r\n      // When user clicks away from name, make sure the beginning of the name is shown\r\n      let fileName = document.querySelector(`p[id=\"${id}\"]`);\r\n      if (fileName) {\r\n        fileName.addEventListener(\r\n          \"blur\",\r\n          function (e) {\r\n            this.scrollLeft = \"0px\";\r\n          },\r\n          true\r\n        );\r\n      }\r\n\r\n      // If user clicks outside of name of dropblock, turn off editability of name\r\n      if (editableName === true) {\r\n        if (!nameRef.current.contains(e.target)) {\r\n          setEditableName((prevValue) => !prevValue);\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener(\"click\", updateEditableName);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"click\", updateEditableName);\r\n    };\r\n  }, [editableName]);\r\n\r\n  return (\r\n    <div role=\"button\" className=\"DropBlock\">\r\n      <div\r\n        className={\r\n          isOpen\r\n            ? `icon active ${type} dropDownArrow down`\r\n            : `icon active ${type} dropDownArrow right`\r\n        }\r\n        onClick={() => {\r\n          isExpanded();\r\n        }}\r\n      >\r\n        {type !== \"studySet\" ? <Icons.MdArrowDropDown /> : null}\r\n      </div>\r\n      <div className={`icon ${type}`}>\r\n        {type === \"folder\" ? (\r\n          <FolderIcon fill={iconColour} />\r\n        ) : type === \"binder\" ? (\r\n          <BinderIcon stroke={iconColour} />\r\n        ) : (\r\n          <StudySetIcon stroke={iconColour} />\r\n        )}\r\n      </div>\r\n      <p\r\n        ref={nameRef}\r\n        id={id}\r\n        spellCheck=\"false\"\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            setEditableName((prevValue) => !prevValue);\r\n          }\r\n          setTimeout(function () {\r\n            handleNameChange(\r\n              type,\r\n              folderIndex,\r\n              binderIndex,\r\n              studySetIndex,\r\n              nameRef.current.innerText\r\n            );\r\n          }, 100);\r\n        }}\r\n        contentEditable={editableName}\r\n        className=\"p2\"\r\n      ></p>\r\n      <Icons.MdMoreHoriz\r\n        className=\"icon active dots\"\r\n        onClick={(e) => {\r\n          handleDropdownMenu(e);\r\n        }}\r\n      ></Icons.MdMoreHoriz>\r\n      {dropdownMenu ? (\r\n        <Portal\r\n          state={dropdownMenu}\r\n          handleState={() => setDropdownMenu((prevState) => !prevState)}\r\n        >\r\n          <div\r\n            onClick={() => setDropdownMenu((prevState) => !prevState)}\r\n            className=\"dropdownMenu\"\r\n            style={{ ...styles.popover, ...coords }}\r\n          >\r\n            {dropBlockMenuData.map((item, index) => {\r\n              return (\r\n                <Block\r\n                  handleDelete={handleDelete}\r\n                  handleRename={handleRename}\r\n                  handleColourPicker={handleColourPicker}\r\n                  handleAddItem={handleAddItem}\r\n                  showDropBlocks={isExpanded}\r\n                  item={item}\r\n                  id={`${item} Block ${index}`}\r\n                  key={`${item} Block ${index}`}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </Portal>\r\n      ) : null}\r\n      {colourPicker ? (\r\n        <Portal state={colourPicker} handleState={handleColourPicker}>\r\n          <div\r\n            style={{ ...styles.popover, ...coords }}\r\n            className=\"colourPicker\"\r\n          >\r\n            <ColourPicker\r\n              iconColour={iconColour}\r\n              setIconColour={setIconColour}\r\n            ></ColourPicker>\r\n          </div>\r\n        </Portal>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst styles = {\r\n  popover: {\r\n    position: \"absolute\",\r\n    transform: \"translate(0, 15px)\",\r\n  },\r\n};\r\n\r\nexport default DropBlock;\r\n","C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\AddCard.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\Portal.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\MainFrame\\TopBar.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\StudyQueue.js",["76","77"],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\SettingsData.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\Settings.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\General\\Block.js",[],"C:\\Users\\jonat\\dekked-nav-bar\\src\\components\\Settings\\Account.js",[],{"ruleId":"78","severity":1,"message":"79","line":4,"column":8,"nodeType":"80","messageId":"81","endLine":4,"endColumn":19},{"ruleId":"82","severity":1,"message":"83","line":83,"column":17,"nodeType":"84","endLine":103,"endColumn":18},{"ruleId":"78","severity":1,"message":"85","line":1,"column":36,"nodeType":"80","messageId":"81","endLine":1,"endColumn":44},{"ruleId":"82","severity":1,"message":"83","line":62,"column":13,"nodeType":"84","endLine":82,"endColumn":14},{"ruleId":"78","severity":1,"message":"85","line":1,"column":17,"nodeType":"80","messageId":"81","endLine":1,"endColumn":25},{"ruleId":"78","severity":1,"message":"86","line":1,"column":27,"nodeType":"80","messageId":"81","endLine":1,"endColumn":36},{"ruleId":"78","severity":1,"message":"87","line":1,"column":38,"nodeType":"80","messageId":"81","endLine":1,"endColumn":44},{"ruleId":"78","severity":1,"message":"88","line":4,"column":20,"nodeType":"80","messageId":"81","endLine":4,"endColumn":26},{"ruleId":"89","severity":1,"message":"90","line":94,"column":6,"nodeType":"91","endLine":94,"endColumn":20,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":127,"column":6,"nodeType":"91","endLine":127,"endColumn":20,"suggestions":"94"},{"ruleId":"78","severity":1,"message":"95","line":10,"column":23,"nodeType":"80","messageId":"81","endLine":10,"endColumn":37},{"ruleId":"78","severity":1,"message":"96","line":11,"column":25,"nodeType":"80","messageId":"81","endLine":11,"endColumn":41},"no-unused-vars","'PageContent' is defined but never used.","Identifier","unusedVar","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'useState' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'Router' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'binderIndex', 'editableName', 'folderIndex', 'studySetIndex', and 'type'. Either include them or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["98"],"'setButtonState' is assigned a value but never used.","'setNotifications' is assigned a value but never used.",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [binderIndex, editableName, folderBlocks, folderIndex, studySetIndex, type]",{"range":"103","text":"104"},"Update the dependencies array to be: [editableName, id]",{"range":"105","text":"106"},[3612,3626],"[binderIndex, editableName, folderBlocks, folderIndex, studySetIndex, type]",[4603,4617],"[editableName, id]"]